import search from "./search";

describe("search", () => {
  describe("exact matches", () => {
    const text = "H√¥m nay tr·ªùi ƒë·∫πp qu√°";

    it("should find single word matches", () => {
      expect(search(text, "troi")).toMatchObject({
        matches: ["tr·ªùi"],
        positions: [{ start: 8, length: 4 }],
      });
    });

    it("should find phrase matches", () => {
      expect(search(text, "troi dep")).toMatchObject({
        matches: ["tr·ªùi ƒë·∫πp"],
        positions: [{ start: 8, length: 8 }],
      });
    });

    it("should find multiple words phrase", () => {
      expect(search(text, "hom nay troi")).toMatchObject({
        matches: ["H√¥m nay tr·ªùi"],
        positions: [{ start: 0, length: 12 }],
      });
    });
  });

  describe("partial matches", () => {
    const menuText = `TH·ª∞C ƒê∆†N:
- M√≥n #123: Ph·ªü b√≤ t√°i n·∫°m g·∫ßu
- M√≥n #456: C∆°m t·∫•m s∆∞·ªùn b√¨ ch·∫£
*Gi√°: 50.000ƒë/ph·∫ßn

KHUY·∫æN M√ÉI:
+ Freeship d∆∞·ªõi 2km
+ Gi·∫£m 10% cho ho√° ƒë∆°n tr√™n 200k

Li√™n h·ªá: 0123-456-789
ƒê·ªãa ch·ªâ: 123/45 ƒê∆∞·ªùng L√™_L·ª£i, P.B·∫øn_Ngh√©, Q.1, TP.HCM

#pho #comtam #monngon #ship`.trim();

    it("should find numbers", () => {
      expect(search(menuText, "123")).toMatchObject({
        matches: ["123", "123", "123"],
        positions: [
          { start: 17, length: 3 },
          { start: 169, length: 3 },
          { start: 190, length: 3 },
        ],
      });
    });

    it("should find with diacritics characters", () => {
      expect(search(menuText, "pho")).toMatchObject({
        matches: ["Ph·ªü", "pho"],
        positions: [
          { start: 22, length: 3 },
          { start: 237, length: 3 },
        ],
      });
    });

    it("should find words containing underscore", () => {
      expect(search(menuText, "ben nghe")).toMatchObject({
        matches: ["B·∫øn_Ngh√©"],
        positions: [{ start: 213, length: 8 }],
      });
    });
  });

  describe("multiple matches in complex text", () => {
    const reportText = `
      B√ÅO C√ÅO KINH DOANH 2023
      ---------------------------
      
      1. Qu√Ω 1/2023:
      - Doanh thu: 1.234.567.890ƒë
      - Chi ph√≠: 567.890.123ƒë
      - L·ª£i nhu·∫≠n: 666.677.767ƒë
      
      2. Qu√Ω 2/2023:
      - Doanh thu: 2.345.678.901ƒë
      - Chi ph√≠: 789.012.345ƒë
      - L·ª£i nhu·∫≠n: 1.556.666.556ƒë
      
      3. Qu√Ω 3/2023:
      - Doanh thu: 3.456.789.012ƒë
      - Chi ph√≠: 901.234.567ƒë
      - L·ª£i nhu·∫≠n: 2.555.554.445ƒë
      
      4. Qu√Ω 4/2023:
      - Doanh thu: 4.567.890.123ƒë
      - Chi ph√≠: 1.234.567.890ƒë
      - L·ª£i nhu·∫≠n: 3.333.322.233ƒë
      
      === T·ªîNG K·∫æT NƒÇM 2023 ===
      * T·ªïng doanh thu: 11.604.925.926ƒë
      * T·ªïng chi ph√≠: 3.492.704.925ƒë
      * T·ªïng l·ª£i nhu·∫≠n: 8.112.221.001ƒë
      
      Ghi ch√∫: S·ªë li·ªáu ƒë√£ ƒë∆∞·ª£c ki·ªÉm to√°n b·ªüi C√îNG TY TNHH KI·ªÇM TO√ÅN ABC
      M√£ s·ªë thu·∫ø: 0123456789-001
    `.trim();

    it("should find and match financial numbers", () => {
      expect(search(reportText, "567")).toMatchObject({
        matches: ["567", "567", "567", "567", "567", "567"],
        positions: [
          { start: 111, length: 3 },
          { start: 137, length: 3 },
          { start: 395, length: 3 },
          { start: 483, length: 3 },
          { start: 519, length: 3 },
          { start: 819, length: 3 },
        ],
      });
    });

    it("should find recurring phrases in Vietnamese text", () => {
      expect(search(reportText, "doanh thu")).toMatchObject({
        matches: ["Doanh thu", "Doanh thu", "Doanh thu", "Doanh thu", "doanh thu"],
        positions: [
          { start: 94, length: 9 },
          { start: 218, length: 9 },
          { start: 344, length: 9 },
          { start: 470, length: 9 },
          { start: 614, length: 9 },
        ],
      });
    });

    it("should find with case sensitivity in Vietnamese", () => {
      expect(search(reportText, "tong")).toMatchObject({
        matches: ["T·ªîNG", "T·ªïng", "T·ªïng", "T·ªïng"],
        positions: [
          { start: 579, length: 4 },
          { start: 609, length: 4 },
          { start: 649, length: 4 },
          { start: 686, length: 4 },
        ],
      });
    });
  });

  describe("special characters handling", () => {
    it("should handle text with mixed unicode blocks", () => {
      const mixedText = "Xin ch√†o ‰Ω†Â•Ω „Åì„Çì„Å´„Å°„ÅØ ‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô‡∏Æ‡∏±‡πà‡∏ô‡πÄ‡∏™‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏ó‡∏£‡∏°‡πÅ‡∏™‡∏ô‡∏™‡∏±‡∏á‡πÄ‡∏ß‡∏ä";
      expect(search(mixedText, "xin chao")).toMatchObject({
        matches: ["Xin ch√†o"],
        positions: [{ start: 0, length: 8 }],
      });
    });

    // it("should handle text containing emojis", () => {
    //   const emojiText = "üëã Xin ch√†o üåç! Ch√†o m·ª´ng ƒë·∫øn üáªüá≥ Vi·ªát Nam üéâ";
    //   expect(search(emojiText, "viet nam")).toMatchObject({
    //     matches: ["Vi·ªát Nam"],
    //     positions: [{ start: 32, length: 8 }],
    //   });
    // });

    it("should handle text with control characters", () => {
      const controlText = "D√≤ng1\r\nD√≤ng2\tC√°ch\u0000K√ΩT·ª±Null\u001Fƒê∆°nV·ªã";
      expect(search(controlText, "dong")).toMatchObject({
        matches: ["D√≤ng", "D√≤ng"],
        positions: [
          { start: 0, length: 4 },
          { start: 7, length: 4 },
        ],
      });
    });
  });

  describe("regex special characters in text", () => {
    const text = "Ch√†o (th·∫ø gi·ªõi) [ki·ªÉm tra] {123} ^b·∫Øt ƒë·∫ßu$ |ƒë∆∞·ªùng|\\g·∫°ch ch√©o/";

    it("should handle regex special characters in search pattern", () => {
      expect(search(text, "(the gioi)")).toMatchObject({
        matches: ["th·∫ø gi·ªõi"],
        positions: [{ start: 6, length: 8 }],
      });

      expect(search(text, "[kiem tra]")).toMatchObject({
        matches: ["ki·ªÉm tra"],
        positions: [{ start: 17, length: 8 }],
      });

      expect(search(text, "\\gach cheo")).toMatchObject({
        matches: ["g·∫°ch ch√©o"],
        positions: [{ start: 51, length: 9 }],
      });
    });
  });
});
